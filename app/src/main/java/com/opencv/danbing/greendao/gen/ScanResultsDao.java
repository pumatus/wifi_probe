package com.opencv.danbing.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.opencv.danbing.greendao.entity.ScanResults;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SCAN_RESULTS".
*/
public class ScanResultsDao extends AbstractDao<ScanResults, Long> {

    public static final String TABLENAME = "SCAN_RESULTS";

    /**
     * Properties of entity ScanResults.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Dt = new Property(1, String.class, "dt", false, "DT");
        public final static Property MacAddress = new Property(2, String.class, "macAddress", false, "MAC_ADDRESS");
        public final static Property DeviceType = new Property(3, String.class, "deviceType", false, "DEVICE_TYPE");
        public final static Property DefaultTaskID = new Property(4, String.class, "defaultTaskID", false, "DEFAULT_TASK_ID");
        public final static Property DataStr = new Property(5, String.class, "dataStr", false, "DATA_STR");
        public final static Property TimeStr = new Property(6, String.class, "timeStr", false, "TIME_STR");
    }


    public ScanResultsDao(DaoConfig config) {
        super(config);
    }
    
    public ScanResultsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCAN_RESULTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"DT\" TEXT," + // 1: dt
                "\"MAC_ADDRESS\" TEXT," + // 2: macAddress
                "\"DEVICE_TYPE\" TEXT," + // 3: deviceType
                "\"DEFAULT_TASK_ID\" TEXT," + // 4: defaultTaskID
                "\"DATA_STR\" TEXT," + // 5: dataStr
                "\"TIME_STR\" TEXT);"); // 6: timeStr
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCAN_RESULTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ScanResults entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dt = entity.getDt();
        if (dt != null) {
            stmt.bindString(2, dt);
        }
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(3, macAddress);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(4, deviceType);
        }
 
        String defaultTaskID = entity.getDefaultTaskID();
        if (defaultTaskID != null) {
            stmt.bindString(5, defaultTaskID);
        }
 
        String dataStr = entity.getDataStr();
        if (dataStr != null) {
            stmt.bindString(6, dataStr);
        }
 
        String timeStr = entity.getTimeStr();
        if (timeStr != null) {
            stmt.bindString(7, timeStr);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ScanResults entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dt = entity.getDt();
        if (dt != null) {
            stmt.bindString(2, dt);
        }
 
        String macAddress = entity.getMacAddress();
        if (macAddress != null) {
            stmt.bindString(3, macAddress);
        }
 
        String deviceType = entity.getDeviceType();
        if (deviceType != null) {
            stmt.bindString(4, deviceType);
        }
 
        String defaultTaskID = entity.getDefaultTaskID();
        if (defaultTaskID != null) {
            stmt.bindString(5, defaultTaskID);
        }
 
        String dataStr = entity.getDataStr();
        if (dataStr != null) {
            stmt.bindString(6, dataStr);
        }
 
        String timeStr = entity.getTimeStr();
        if (timeStr != null) {
            stmt.bindString(7, timeStr);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ScanResults readEntity(Cursor cursor, int offset) {
        ScanResults entity = new ScanResults( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dt
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // macAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // deviceType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // defaultTaskID
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dataStr
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // timeStr
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ScanResults entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDt(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMacAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDeviceType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDefaultTaskID(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDataStr(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTimeStr(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ScanResults entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ScanResults entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ScanResults entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
